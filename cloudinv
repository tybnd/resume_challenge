<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta  http-equiv="Content-Type" content="text/html;charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Inventory Manager</title>
  <style>
    /* Reset styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, sans-serif;
    }

    /* Page layout */
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background-color: #f4f6f9;
      color: #333;
    }

    /* Centered container */
    .container {
      width: 80%;
      max-width: 800px;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    h2 {
      margin-bottom: 20px;
      font-size: 1.8em;
      color: #0056b3;
    }

    /* Table styling */
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 15px;
      border-bottom: 1px solid #e0e0e0;
      text-align: left;
    }

    th {
      background-color: #f5f5f5;
      color: #333;
      font-weight: bold;
    }

    td {
      color: #555;
    }

    tr:hover {
      background-color: #f0f8ff;
    }

    /* Button styling */
    button {
      background-color: #007bff;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #0056b3;
    }

    /* Input styling */
    input[type="number"] {
      width: 60px;
      padding: 5px;
      border: 1px solid #ddd;
      border-radius: 4px;
      text-align: center;
    }

    /* Mobile responsiveness */
    @media (max-width: 600px) {
      .container {
        width: 100%;
        padding: 10px;
      }

      th, td {
        padding: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Tyler B's <br> Cloud Resources Manager</h2>
    <p>These items belong to a DynamoDB table, when you change the value of one of the items (and update it), it will update the item in the DynamoDB table and save that value. Give it a try! Change the value of an item, update it, and refresh the page. The value you updated will remain the same.</p>
    <table id="inventoryTable">
      <thead>
        <tr>
          <th>Item</th>
          <th>Quantity</th>
          <th>Update</th>
        </tr>
      </thead>
      <tbody id="inventoryBody"></tbody>
    </table>
  </div>

  <script>
    const apiUrl = "https://mhc2vkfs17.execute-api.us-east-1.amazonaws.com/Prod";
  
    // Fetch all inventory items and populate the table
    async function fetchInventory() {
      try {
        const response = await fetch(`${apiUrl}/get-all`);
        if (!response.ok) throw new Error("Network response was not ok");
  
        const data = await response.json();
        const items = JSON.parse(data.body); // Parse the `body` field to get the array of items
        console.log("Parsed items:", items); // Verify the parsed data
  
        populateTable(items);
      } catch (error) {
        console.error("Error fetching inventory:", error);
      }
    }
  
    // Populate the table with items
    function populateTable(items) {
      const tableBody = document.getElementById("inventoryBody");
      tableBody.innerHTML = ""; // Clear existing rows
      items.forEach(item => {
        const row = document.createElement("tr");
  
        const nameCell = document.createElement("td");
        nameCell.textContent = item.ID;
        row.appendChild(nameCell);
  
        const quantityCell = document.createElement("td");
        quantityCell.innerHTML = `<input type="number" value="${item.Quantity}" id="quantity-${item.ID}">`;
        row.appendChild(quantityCell);
  
        const updateCell = document.createElement("td");
        const updateButton = document.createElement("button");
        updateButton.textContent = "Update";
        updateButton.onclick = () => updateItem(item.ID);
        updateCell.appendChild(updateButton);
        row.appendChild(updateCell);
  
        tableBody.appendChild(row);
      });
    }
  
    // Update item quantity using the PUT API call
    async function updateItem(id) {
      const quantityInput = document.getElementById(`quantity-${id}`);
      const newQuantity = quantityInput.value;
  
      try {
        quantityInput.disabled = true;
        const response = await fetch(`${apiUrl}/put?ID=${id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ ID: id, Quantity: parseInt(newQuantity) })
        });
  
        if (!response.ok) throw new Error("Failed to update item");
        
        alert(`Item ${id} updated successfully!`);
      } catch (error) {
        console.error("Error updating item:", error);
      } finally {
        quantityInput.disabled = false;
      }
    }
  
    // Initial fetch
    fetchInventory();
  </script>
  
</body>
</html>
